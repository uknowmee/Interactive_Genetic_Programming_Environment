//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/projects/Interactive_Genetic_Programming_Environment/Interactive.Genetic.Programming.Environment/src/Services/Interpreter/IntGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interpreter {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="IntGrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IIntGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] IntGrammarParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] IntGrammarParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLine([NotNull] IntGrammarParser.LineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLine([NotNull] IntGrammarParser.LineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] IntGrammarParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] IntGrammarParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] IntGrammarParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] IntGrammarParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] IntGrammarParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] IntGrammarParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] IntGrammarParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] IntGrammarParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] IntGrammarParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] IntGrammarParser.ParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] IntGrammarParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] IntGrammarParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] IntGrammarParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] IntGrammarParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.objectFunctionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectFunctionCall([NotNull] IntGrammarParser.ObjectFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.objectFunctionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectFunctionCall([NotNull] IntGrammarParser.ObjectFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.objectFunctionCallFromFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectFunctionCallFromFunction([NotNull] IntGrammarParser.ObjectFunctionCallFromFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.objectFunctionCallFromFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectFunctionCallFromFunction([NotNull] IntGrammarParser.ObjectFunctionCallFromFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.objectCreationCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectCreationCall([NotNull] IntGrammarParser.ObjectCreationCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.objectCreationCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectCreationCall([NotNull] IntGrammarParser.ObjectCreationCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.inplaceQuestion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInplaceQuestion([NotNull] IntGrammarParser.InplaceQuestionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.inplaceQuestion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInplaceQuestion([NotNull] IntGrammarParser.InplaceQuestionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] IntGrammarParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] IntGrammarParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantExpression([NotNull] IntGrammarParser.ConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantExpression([NotNull] IntGrammarParser.ConstantExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>objectFunctionCallExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectFunctionCallExpression([NotNull] IntGrammarParser.ObjectFunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>objectFunctionCallExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectFunctionCallExpression([NotNull] IntGrammarParser.ObjectFunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] IntGrammarParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] IntGrammarParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] IntGrammarParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] IntGrammarParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] IntGrammarParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] IntGrammarParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExpression([NotNull] IntGrammarParser.ComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExpression([NotNull] IntGrammarParser.ComparisonExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] IntGrammarParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] IntGrammarParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>objectCreationCallExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectCreationCallExpression([NotNull] IntGrammarParser.ObjectCreationCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>objectCreationCallExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectCreationCallExpression([NotNull] IntGrammarParser.ObjectCreationCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanExpression([NotNull] IntGrammarParser.BooleanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanExpression([NotNull] IntGrammarParser.BooleanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionExpression([NotNull] IntGrammarParser.FunctionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionExpression</c>
	/// labeled alternative in <see cref="IntGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionExpression([NotNull] IntGrammarParser.FunctionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultOp([NotNull] IntGrammarParser.MultOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultOp([NotNull] IntGrammarParser.MultOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddOp([NotNull] IntGrammarParser.AddOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddOp([NotNull] IntGrammarParser.AddOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompareOp([NotNull] IntGrammarParser.CompareOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompareOp([NotNull] IntGrammarParser.CompareOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.boolOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolOp([NotNull] IntGrammarParser.BoolOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.boolOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolOp([NotNull] IntGrammarParser.BoolOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] IntGrammarParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] IntGrammarParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] IntGrammarParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] IntGrammarParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="IntGrammarParser.scope"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScope([NotNull] IntGrammarParser.ScopeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="IntGrammarParser.scope"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScope([NotNull] IntGrammarParser.ScopeContext context);
}
} // namespace Interpreter
